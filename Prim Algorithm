/******************************************************************************
Prim Algorithm
*******************************************************************************/
#include <iostream>
#define INF 100
using namespace std;

typedef struct Edge
{
  char v1, v2;
  int weight;
  struct Edge *next;
} Edge;

typedef struct IncidentEdge
{
  char aName;
  Edge *e;
  struct IncidentEdge *next;
} IncidentEdge;

typedef struct Vertex
{
  char vName;
  bool visited;
  IncidentEdge *iHead;
  struct Vertex *next;
} Vertex;

typedef struct
{
  Vertex *vHead;
  Edge *ehead;
  int eCount, vCount;
} Graph;

void init (Graph * G)
{
  G->vHead = NULL;
  G->ehead = NULL;
  G->vCount = G->eCount = 0;
}

void makeVertex (Graph * G, char vName)
{
  Vertex *v = (Vertex *) malloc (sizeof (Vertex));
  v->vName = vName;
  v->visited = false;
  v->iHead = NULL;
  v->next = NULL;
  G->vCount++;

  Vertex *q = G->vHead;
  if (q == NULL)
    G->vHead = v;
  else
    {
      while (q->next != NULL)
    	q = q->next;
      q->next = v;
    }
}

void makeIncidentEdge (Vertex * v, char aName, Edge * e)
{
  IncidentEdge *p = (IncidentEdge *) malloc (sizeof (IncidentEdge));
  p->aName = aName;
  p->e = e;
  p->next = NULL;
  IncidentEdge *q = v->iHead;
  if (q == NULL)
    v->iHead = p;
  else
    {
      while (q->next != NULL)
	q = q->next;
      q->next = p;
    }
}

Vertex * findVertex (Graph * G, char vName)
{
  Vertex *v = G->vHead;
  while (v->vName != vName)
    v = v->next;
  return v;
}

void insertEdge (Graph * G, char v1, char v2, int w)	// ex ) a b 3
{
  Edge *e = (Edge *) malloc (sizeof (Edge));
  e->weight = w;
  e->v1 = v1;
  e->v2 = v2;
  e->next =NULL;
  G->eCount++;

  Edge *q = G->ehead;
  if (q == NULL)
    G->ehead = e;
  else
    {
      while (q->next != NULL)	q = q->next;
      q->next = e;
    }
  Vertex *v = findVertex (G, v1);
  makeIncidentEdge (v, v2, e);
  v = findVertex (G, v2);
  makeIncidentEdge (v, v1, e);
}

char getMinVertex (Graph * G, int dist[])
{
  Vertex *p = G->vHead;
  char vName;
  for (; p != NULL; p = p->next)
    {
    
      if (p->visited == false)
	{
	  vName = p->vName;
	  break;
	}
    }
  
  for (p = G->vHead; p != NULL; p = p->next)
    if (p->visited == false	&& (dist[p->vName - 97] < dist[vName - 97]))vName = p->vName;

	return vName;
    
}
	
void prim (Graph * G, char vName, int dist[])
{
	Vertex * p = findVertex (G, vName);
	IncidentEdge * q;
	char nextvName;
	dist[p->vName - 97] = 0; 
	
	for (int i = 0; i < G->vCount; i++)
	{
	nextvName = getMinVertex (G, dist); /*priorith_queue로 하면 O(nlogn)임 지금은 O(n^2)*/
	p = findVertex (G, nextvName);
	p->visited = true;
	printf ("(%c) ", p->vName);
	
	for (q = p->iHead; q != NULL; q = q->next)
	{
	p = findVertex (G, q->aName);
	if (p->visited == false) dist[q -> aName - 97] = q->e->weight; 
	}

	}
}
void print(Graph* G){
    Vertex * p = G->vHead;
    IncidentEdge* q;
    
    for(;p != NULL;p = p -> next){
        printf("[%c] : ",p -> vName);
        for(q = p -> iHead; q!=NULL;q = q->next)
            cout<< q->aName<< q->e->weight<<" ";
        cout<<'\n';
    }
    cout<<'\n';
}
int main ()
{
	Graph G;
	init (&G);
	
	makeVertex (&G, 'a'); makeVertex (&G, 'b'); makeVertex (&G, 'c');
	makeVertex (&G, 'd'); makeVertex (&G, 'e'); makeVertex (&G, 'f');
	
	insertEdge (&G, 'a', 'b', 3); insertEdge (&G, 'a', 'd', 2);
	insertEdge (&G, 'a', 'e', 4); insertEdge (&G, 'b', 'c', 1);
	insertEdge (&G, 'b', 'd', 4); insertEdge (&G, 'b', 'f', 2);
	insertEdge (&G, 'c', 'f', 1); insertEdge (&G, 'd', 'e', 5);
	insertEdge (&G, 'd', 'f', 7); insertEdge (&G, 'e', 'f', 9);
    
    int dist[10]; 
    for (int i = 0; i < 10; i++) dist[i] = INF;
    print(&G);
	prim (&G, 'c', dist); 
	
	return 0;
	}
