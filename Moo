#include <iostream>
using namespace std;
int N;
int S[30];//moo 0903 분할정복, 재귀
void sol(int i){
//	cout<<N<<'\n';
	if(i==0){
	if(N==1) cout<<'m';
	else if(N==2||N==3)cout<<'o';
	exit(0);
	}
	
	if(N<=S[i-1]) {
		sol(i-1);
	}
    if(N>S[i]-S[i-1]){
		N-=S[i]-S[i-1];
		sol(i-1);
	}
	else {
		if(N==S[i-1]+1) cout<<'m';
		else cout<<'o';
		exit(0);
	}
}
int main() {
	cin>>N;
	S[0]=3;
	int start=0;
	for(int i=1;i<30;i++){
		S[i]=2*S[i-1]+i+3;
		if(S[i]==N) {cout<<'o';return 0;}
		else if(S[i]>N){
		start=i;
		break;
		}
	}
//	cout<<start<<'\n';
	sol(start);
	return 0;
}
//set 정렬 0909
#include <algorithm>
#include <iostream>
#include <set>
using namespace std;
int N; 
struct compare {
	bool operator() (const string &a, const string &b) const{
		if (a.size() == b.size())
			return a < b;
		else
			return a.size() < b.size();
	}
};
int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
   cin>>N;
   set<string,compare> s;
   string a="";
   for(int i=0;i<N;i++){ 
   	cin>>a;
   	s.insert(a);
   }
   for(auto e:s) cout<<e<<'\n';
}
//find(iterator ,iterator, ??)
#include<algorithm> //find 함수 
#include <iostream>
#include <vector>
using namespace std;
int N,M; int arr[200000];
int main() {
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	int *p;
	cin>>N;
	for(int i=0;i<N;i++) cin>>arr[i];
	cin>>M;
	for(int i=0;i<M;i++){
		int k=0;cin>>k;
		p=find(arr,arr+N,k);
		if(p!=arr+N) cout<<'1'<<'\n';
		else cout<<'0'<<'\n';
	}
	return 0;
}
//포도 시식 다이내믹 프로그래밍
//bottomup
#include <stdio.h>
int main()
{
	int dy[10010]={0,};
	int a[10010]={0,};
	int n,i,j;
	scanf("%d",&n);
	n+=2;
	for(i=3;i<=n;i++)scanf("%d",&a[i]);
	for(i=3;i<=n;i++){
		dy[i]=dy[i-1];
		if(dy[i-2]+a[i]>dy[i])dy[i]=dy[i-2]+a[i];
		if(dy[i-3]+a[i-1]+a[i]>dy[i])dy[i]=dy[i-3]+a[i-1]+a[i];
	}
	printf("%d",dy[n]);
}
//스도쿠 백트랙킹
#include <iostream>
using namespace std;
int sudoku[10][10];
void visit(int x,int y,bool visited[10])
{
	if(x==0) x=0;
	else if(x==1) x=3;
	else x=6;
	if(y==0) y=0;
	else if(y==1) y=3;
	else y=6;
	for(int i=x;i<x+3;i++)
	{
		for(int j=y;j<y+3;j++)
		{
			if(sudoku[i][j]!=0) visited[sudoku[i][j]]=1;
		}
	}	
}
bool line(int l,int n)
{
	for(int i=0;i<9;i++)
	{
		if(sudoku[i][l]==0) continue;
		if(sudoku[i][l]==n) return false; 
	}
	return true;	
}
bool row(int r,int n)
{
	for(int i=0;i<9;i++)
	{
		if(sudoku[r][i]==0) continue;
		if(sudoku[r][i]==n) return false; 
	}
	return true;
}
void sol(int x,int y) {
	if(x>=9||y>=9)
	{
	 for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			cout<<sudoku[i][j]<<" ";
		}
		cout<<'\n';
	}
	exit(0);
	}
	bool visited[10]={0};
	visit(x/3,y/3,visited);//3.같은 정사각형 안에서
	if(sudoku[x][y]==0)
		{
			for(int k=1;k<=9;k++)
				{
					if(!visited[k]&&row(x,k)&&line(y,k))
					{
						sudoku[x][y]=k;
						visited[sudoku[x][y]]=1;
						 
						if(y==8)  sol(x+1,0);
						else  sol(x,y+1);
						sudoku[x][y]=0;
						visited[sudoku[x][y]]=0;
						continue;
					}
				}
				if(sudoku[x][y]==0) return;
		}
	else 
	{
			if(y==8) sol(x+1,0);
			else sol(x,y+1);
			return;
	}
}
int main() {
	for(int i=0;i<9;i++)
		for(int j=0;j<9;j++)
			cin>>sudoku[i][j];
	
	sol(0,0);
	return 0;
}
