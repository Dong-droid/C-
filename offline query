/******************************************************************************

BOJ 16978 offline query

*******************************************************************************/

#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

using ll=long long;
using pi = pair<ll,ll>;
const ll N = 3e6+100;
ll n,m,k,tc=1,a,b,c,d,now;
ll tree[N],arr[N];
struct u{ll a,b;};
struct q{
    ll idx,a,b,c;
    bool operator <(struct q chs){
        return a < chs.a; 
    };
};
vector<struct u> up;
vector<struct q> qr;

struct cmp{
    bool operator () (pi a, pi b) {
    return a.first > b.first;
}
};
ll init(ll N,ll s ,ll e){
	if(s==e) {
	    tree[N] = arr[s];
	    return tree[N];
	}
	ll mid=(s+e)/2;
	return tree[N]=init(N*2,s,mid)+init(N*2+1,mid+1,e);
}
void update(ll N,ll s,ll e,ll idx,ll val){
	if(idx>e||idx<s) return;
	if(s==e){
		if(idx==s) tree[N] = val;
		return;
	}
	ll mid=(s+e)/2;
	update(N*2,s,mid,idx,val);
	update(N*2+1,mid+1,e,idx,val);
	tree[N]=tree[N*2]+tree[N*2+1];
}
ll query(ll N,ll s,ll e, ll l, ll r){
	if(l>e || r<s) return 0;
	if(l<=s&&e<=r) return tree[N];
	ll mid=(s+e)/2;
	return query(N*2,s,mid,l,r)+query(N*2+1,mid+1,e,l,r);
}
void solve(){
    priority_queue <pi, vector<pi>,cmp> pq; // 이거 안 쓰고 그냥 배열로 해도 됨
    up.push_back({0,0});
	cin>>n;
	for(int i=0;i<n;i++) cin>>arr[i];
	init(1,0,n-1);
	cin>>m;
    for(int i = 0; i < m; i++){
		cin>>a;
		if(a == 1) {
		    cin>>b>>c;
		    up.push_back({b,c});
		}
		if(a == 2) {
		    cin>>b>>c>>d;
		    qr.push_back({i,b,c,d});
		}
	}
	sort(qr.begin(),qr.end());
	/*for(auto[x,y,z,w] : qr){
	    cout<<x<<" "<<y<<" "<<z<<" "<<w<<'\n';
	}*/
	for(int i = 0; i < up.size(); i++){
	   if(i >= 1) update(1,0,n-1,up[i].a-1,up[i].b);
	   while(now < qr.size() && qr[now].a == i) {
	       pq.push({qr[now].idx,query(1,0,n-1,qr[now].b-1,qr[now].c-1)});
	       now++;
	   }
	}
	while(!pq.empty()){cout<<pq.top().second<<'\n';pq.pop();}
	
}
int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	while(tc--) solve();
	return 0;
}

