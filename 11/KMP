#include <iostream>
#include <vector>
using ll=long long;
using namespace std;
ll fail[1000010];

int main() {
	string S,T;
	getline(cin,S);
	getline(cin,T);
	//i번째에서 fail이 발생하면 어디로 가야하는 지 알려줌
	for(int i=1,j=0;i<T.size();i++){
		while(j>0 && T[i]!=T[j]) j=fail[j-1];
		if(T[i]==T[j]) fail[i]=++j;
	}
	vector<ll> ans;
	for(int i=0,j=0;i<S.size();i++){
		while(j>0 && S[i]!=T[j]) j=fail[j-1];
		if(s[i]==T[j]){
			if(j==T.size()-1){
				ans.push_back(i-T.size()+2);
				j=fail[j];
			}
			else j++;
		}
	}
	cout<<ans.size()<<'\n';
	for(ll nxt:ans)cout<<nxt<<'\n';
	return 0;
}
#include <iostream>
#include <vector>
using ll=long long;
using namespace std;
ll fail[1000010];
ll N,m;
string T;
int main() {
	cin>>N;
	cin>>T;

	for(int i=1,j=0;i<T.size();i++){
		while(j>0 && T[i]!=T[j]) j=fail[j-1];
		if(T[i]==T[j]) fail[i]=++j;
	}
	if(fail[N-1]) cout<<N-fail[N-1];
	else cout<<N;
	return 0;
}
#include <iostream>
#include <vector>
using ll=long long;
using namespace std;
ll fail[1000010];
ll N,ans;
string T;
int main() {
	cin>>T;
	cin>>N;
	ll l=T.size();
	for(int i=1,j=0;i<l;i++){
		while(j>0 && T[i]!=T[j]) j=fail[j-1];
		if(T[i]==T[j]) fail[i]=++j;
	}
	ll m=fail[l-1];
	cout<<l+(l-m)*(N-1);
	return 0;
}
