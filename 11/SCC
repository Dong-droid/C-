#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#define n_ 10001
using ll=long long;
using namespace std;
//타잔 알고리즘

ll V,E,n,m,a,b,c,d,x,y,cnt;
ll dfsn[n_],SN,sn[n_]; //dfsn : 방문 순서를 저장하는 배열 , SN: SCC Number , sn[] i번 정점을 포함하는 SCC 번호

vector<ll> v[n_];
vector<vector<ll>> SCC;
stack<ll> st;
bool fin[n_];// i번째 정점에서 SCC 추출이 끝났는 지 확인하는 배열

ll dfs(ll x){
dfsn[x]=++cnt; //방문순서 저장
st.push(x);
ll ret=dfsn[x];
for(ll nxt : v[x]){
if(!dfsn[nxt]) ret=min(ret,dfs(nxt)); //방문 안 했으면 방문하기 최소로 하는 이유는 front edge, cross edge 무시
else if(!fin[nxt]) ret=min(ret,dfsn[nxt]); //방문했지만 끝나지 않았으면 (back edge) 방문하기
}
if(ret==dfsn[x]){ // 더 이상 위로 올라갈 수 없다
vector<ll> currSCC;
while(1){
  ll a=st.top();
  st.pop();
  currSCC.push_back(a);
  fin[a]=true; //true
  sn[a]=SN; 
  if(a==x) break;
}
  sort(currSCC.begin(),currSCC.end());
  SCC.push_back(currSCC);
  SN++;
}
return ret;
}
int main(){
ios_base::sync_with_stdio(0);
cin.tie(0);cout.tie(0);
cin>>V>>E;
while(E--){
cin>>a>>b;
v[a].push_back(b); //단방향 그래프
}
for(int i=1;i<=V;i++)
  if(!dfsn[i]) dfs(i); // 방문하지 않았으면 방문한다
  
  sort(SCC.begin(),SCC.end());
  cout<<SN<<'\n';
  for(auto cur:SCC){
    for(auto c:cur) 
        cout<<c<<" ";
    cout<<"-1"<<'\n';
 }
}
/******************************************************************************

2-sat

*******************************************************************************/
#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
using namespace std;
using ll = long long;
const ll n_ = 5e5 + 100, inf = 1e9 + 1, mod = 1e9 + 7, sqrtN = 320;
ll n,m,k,tc = 1,a,b,c,d,t_c;
ll dfsn[n_], SN, sn[n_], cnt, fin[n_];
vector<ll> v[n_];
vector<vector<ll>> SCC;
stack<ll> st;
ll dfs(ll x){
    dfsn[x] = ++cnt;
    st.push(x);
    ll ret = dfsn[x];
    for(auto nxt : v[x]){
        if(!dfsn[nxt]) ret = min(ret, dfs(nxt));
        else if(!fin[nxt]) ret = min(ret, dfsn[nxt]);
    }
    if(ret == dfsn[x]){
        vector<ll> cur;
        while(1){
            a = st.top();
            st.pop();
            fin[a] = true;
            sn[a] = SN;
            cur.push_back(a);
            if(a == x) break;
        }
        SCC.push_back(cur);
        SN++;
    }
    return ret;
}
ll A[n_];
ll rev(ll x){
    if(x <= n) return x + n;
    return x - n;
}
void solve(){
    cin>>n>>m; // 변수의 개수와 절의 개수
    while(m--){
        cin>>a>>b;
        if(a < 0) a = abs(a) + n; 
        if(b < 0) b = abs(b) + n;
        v[rev(a)].push_back(b);
        v[rev(b)].push_back(a);
    }
    for(int i = 1; i <= 2 * n; i++){
        if(dfsn[i]) continue; 
        dfs(i);
    }
    for(int i = 1; i <= n; i++){
        if(sn[i] == sn[i+n]){ // x , ~x 가 같은 SCC에 있다 -> 모순이다
            cout<<'0';
            return;
        }
    }
    cout<<'1'<<'\n';
    //타잔 알고리즘 특성상 scc의 번호가 클수록 dag에서 앞에 있음 (topology sort를 해도 됨)
    reverse(SCC.begin(),SCC.end());
    for(auto cur : SCC){
        for(auto nxt : cur){
            if(A[nxt]) continue;
            A[nxt] = 0;
            A[rev(nxt)] = 1;
        }
    }
    for(int i = 1; i <= n; i++) cout<<A[i]<<" ";
 }
int main()
{
    solve();
    return 0;
}
/*******************************************
  BOJ 도미노
  SCC + indgree
******************************************/

#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cstring>
#define n_ 100001
using ll=long long;
using namespace std;

ll V,E,n,m,a,b,c,d,x,y,cnt;
ll dfsn[n_],SN,sn[n_]; //dfsn : 방문 순서를 저장하는 배열 , SN: SCC Number , sn[] i번 정점을 포함하는 SCC 번호
vector<ll> in_dg(n_); // 번호, 인디그리 수
vector<ll> v[n_];
stack<ll> st;
bool fin[n_];// i번째 정점에서 SCC 추출이 끝났는 지 확인하는 배열


ll dfs(ll x){
dfsn[x]=++cnt; //방문순서 저장
st.push(x);
ll ret=dfsn[x];
for(ll nxt : v[x]){
if(!dfsn[nxt]) ret=min(ret,dfs(nxt)); //방문 안 했으면 방문하기 최소로 하는 이유는 front edge, cross edge 무시
else if(!fin[nxt]) ret=min(ret,dfsn[nxt]); //방문했지만 끝나지 않았으면 (back edge) 방문하기
}
if(ret == dfsn[x]){ // 더 이상 위로 올라갈 수 없다
while(1){
  ll a=st.top();
  st.pop();
  fin[a] = true; //true
  sn[a] = SN;
  if(a == x) break; 
}
  SN++;
}
return ret;
}
void init(){
    memset(fin,0,sizeof(fin));
    memset(dfsn,0,sizeof(dfsn));
    memset(sn,0,sizeof(0));
    in_dg.clear();
    in_dg.resize(n_);
    cnt = 0;
    SN = 0;
}
int main(){
    ios_base::sync_with_stdio(0); cin.tie(0);
    int tc = 1; cin>>tc;
    while(tc--){
    //init
    int answer = 0;
    init();
    cin>>V>>E;
    for(int i = 1; i <= V; i++) v[i].clear();
    while(E--){
    cin>>a>>b;
    v[a].push_back(b); //단방향 그래프
  }
    for(int i = 1; i <= V; i++)  if(!dfsn[i]) dfs(i); // 방문하지 않았으면 방문한다
   // cout<<SN<<'\n';
    for(int i = 1; i <= V; i++){
       for(auto j : v[i]){
          if(sn[j] != sn[i]) in_dg[sn[j] % SN]++;
       }
  }
    for(int i = 0; i < SN; i++) if(in_dg[i] == 0) answer++;
    cout<<answer<<'\n';
}
}
