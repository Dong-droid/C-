#11/25
#MST
#10423
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
int p[1001]; int height[1001]; int gener[1001];
int N,M,K;
typedef struct edge {
	int u,v,c;
	bool operator <(edge rhs){
	return c<rhs.c;
	}
} Edge;
vector<Edge> edge;
int Find(int x){
	if(p[x]==-1) return x;
	return p[x]=Find(p[x]);
}
bool Union(int u,int v){
	u=Find(u);v=Find(v);
	if(u==v||gener[u]&&gener[v]) return false;
	if(gener[u])
		p[v] = u;
	else if(gener[v])
		p[u] = v;
	else
		p[v] = u;           // 부모 결정 과정에서 발전기가 있는 곳을 없는 곳에 연결
	return true;   
}
int main() {
	int ans=0,cnt=0,temp;
	cin>>N>>M>>K; temp=N-K;
	for(int i=0,u;i<K;i++){
		cin>>u;
		--u;
		gener[u]=1;
	}
	for(int i=0;i<N;i++) p[i]=-1;
	for(int i=0,u,v,c;i<M;i++){
		cin>>u>>v>>c;
		--u;--v;
		if(gener[u]&&gener[v]) continue;
		edge.push_back({u,v,c});
	}
	sort(edge.begin(),edge.end());
	for(int i=0;i<edge.size();i++){
		int x=edge[i].u,y=edge[i].v,z=edge[i].c;
		if(Union(x,y)){
			cnt++;
			ans+=z;
		}
		cout<<ans<<'\n';
	}
	cout<<ans;
	return 0;
}
//
//벽(한 번)부수고 이동하기
#include <iostream>
#include <queue>
using namespace std;
int N,M;
//이동
int dx[4]={1,0,0,-1};
int dy[4]={0,1,-1,0};

int dist[1001][1001];
int map[1001][1001];
bool visited[1001][1001][2];
queue<pair<pair<int,int>,int>> q; // {x,y,1 or 0 (벽 부수기)}

int main(){
	cin>>N>>M;
	//입력
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			scanf("%1d",&map[i][j]);
		}
	}
	//시작점
    visited[0][0][1]=1;
    visited[0][0][0]=1;
	q.push({{0,0},0});
	//bfs
	while(!q.empty())
	{
		int r=q.front().first.first;
		int w=q.front().first.second;
		int cb=q.front().second; //1 벽을 부쉈다. 0 아니다.
	cout<<r<<w<<cb<<'\n';
		if(r==N-1&&w==M-1) break; //종착지 도착 
		q.pop();
		for(int i=0;i<4;i++)
		{
			int px=r+dx[i];
			int py=w+dy[i];
		
		if(visited[px][py][cb]||px<0||py<0||px>=N||py>=M) continue; //좌표 밖을 넘어감
		if(cb==1&&map[px][py]) continue;
		if(!visited[px][py][1]&&map[px][py])  //부술 수 있고 벽이 있음
		{	
            visited[px][py][1]=1;
			q.push({{px,py},1});
		}
		else if(!map[px][py]) //벽이 없음
        {
        visited[px][py][cb]=1;
		q.push({{px,py},cb});
		}
		
		dist[px][py]=dist[r][w]+1;
	}
	}
	int result=dist[N-1][M-1];
	if(result==0) cout<<-1;
	else cout<<result+1;
	return 0;
}
