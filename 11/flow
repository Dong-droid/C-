#include <iostream>
#include <vector>
#include <cstring>
#include <queue>
using namespace std;
int cap[410][410],flow[410][410],cache[410],n,m,ans,source,sink;
vector<int> v[410];
void add_edge(int from,int to,int c){
	v[from].push_back(to);
	v[to].push_back(from);
	cap[from][to]=c;
}
int Edmond_Karp(int source,int sink){
	int max_flow=0;
	while(1){
		queue<int> q;
		q.push(source);
		memset(cache,-1,sizeof(cache));
		cache[source]=0;
		while(q.size()){
			int cur=q.front();
			q.pop();
			for(auto nxt:v[cur]){
				if(cache[nxt]==-1&&cap[cur][nxt]-flow[cur][nxt]>0){
					cache[nxt]=cur;
					q.push(nxt);
					if(nxt==sink)break;
				}
			}
		}
		if(cache[sink]==-1)break;
		int min_cap=1e9;
		for(int i=sink;i!=source;i=cache[i]){
			int bef=cache[i];
			min_cap=min(min_cap,cap[bef][i]-flow[bef][i]);
		}
		max_flow+=min_cap;
		for(int i=sink;i!=source;i=cache[i]){
			int bef=cache[i];
			flow[bef][i]+=min_cap;
			flow[i][bef]-=min_cap;
		}
	}
}
int main() {
	ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	cin>>n>>m;
	for(int i=1;i<=n;i++){
		int a,b;
		cin>>a;
		for(int j=0;j<a;j++){
			cin>>b;
			add_edge(i,b+n,1);
		}
	}
	for(int i=1;i<=n;i++) add_edge(0,i,1);
	for(int i=1;i<=m;i++) add_edge(i+n,n+m+1,1);
	cout<<Edmond_Karp(0,n+m+1)<<'\n';
	return 0;
}
