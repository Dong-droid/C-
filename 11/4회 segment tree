#include <iostream>
using namespace std;
using ll=long long;
const ll n_=3e6+100;
ll n,m,k,tc=1,a,b,c;
ll tree[n_],arr[n_];
ll init(ll N,ll s ,ll e){
	if(s==e) return tree[N]=arr[s];
	ll mid=(s+e)/2;
	return tree[N]=init(N*2,s,mid)+init(N*2+1,mid+1,e);
}
void update(ll N,ll s,ll e,ll idx,ll val){
	if(idx>e||idx<s) return;
	if(s==e){
		if(idx==s) tree[N]=val;
		return;
	}
	ll mid=(s+e)/2;
	update(N*2,s,mid,idx,val);
	update(N*2+1,mid+1,e,idx,val);
	tree[N]=tree[N*2]+tree[N*2+1];
}
ll query(ll N,ll s,ll e, ll l, ll r){
	if(l>e || r<s) return 0;
	if(l<=s&&e<=r) return tree[N];
	ll mid=(s+e)/2;
	return query(N*2,s,mid,l,r)+query(N*2+1,mid+1,e,l,r);
}
void solve(){
	cin>>n>>m>>k;
	for(int i=0;i<n;i++) cin>>arr[i];
	init(1,0,n-1);
	m+=k;
	while(m--){
		cin>>a>>b>>c;
		if(a==1) update(1,0,n-1,b-1,c);
		else cout<<query(1,0,n-1,b-1,c-1)<<'\n';
	}
}
int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	while(tc--) solve();
	return 0;
}
//min 
#include <iostream>
using namespace std;
using ll=long long;
const ll n_=3e6+100;
ll n,m,k,tc=1,a,b,c;
ll min_tree[n_],arr[n_];
ll min_init(ll N,ll s ,ll e){
	if(s==e) return min_tree[N]=arr[s];
	ll mid=(s+e)/2;
	return min_tree[N]=min(min_init(N*2,s,mid),min_init(N*2+1,mid+1,e));
}

ll min_query(ll N,ll s,ll e, ll l, ll r){
	if(l>e || r<s) return 10000000001;
	if(l<=s&&e<=r) return min_tree[N];
	ll mid=(s+e)/2;
	return min(min_query(N*2,s,mid,l,r),min_query(N*2+1,mid+1,e,l,r));
}
void solve(){
	cin>>n>>m;
	for(int i=0;i<n;i++) cin>>arr[i];
	min_init(1,0,n-1);
	while(m--){
		cin>>a>>b;
		cout<<min_query(1,0,n-1,a-1,b-1)<<'\n';
	}
}
int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	while(tc--) solve();
	return 0;
}
/////////////////////////////////////////////////////////
/*lazy-propagation*/

...
