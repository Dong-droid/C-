//다리
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using ll = long long;
ll T,N,M;

int main()
{
 // ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  cin>>T;
  while(T--){
    cin>>N>>M;
    vector<pair<ll,ll>> l(N+M);
    ll p = 0, q = 0,res = 0, ans, np = N, nq = M, i = 0;
    
  for(int i = 0; i < N; i++) {
      cin>>p; l[i] = {p,1}; //구조체 사용 시 깔끔함
  }
  for(int i = N; i < N+M; i++){ 
      cin>>p; l[i] = {p,0};
  }
  sort(l.begin(),l.end(),greater<>());
  for(i = 0; i <= N+M; i++){ 
      res = (N - 2 * np) * M + (M - 2 * nq) * N;
      if(res > 0) {i--;break;}
      if(l[i].second) np--;
      else nq--;
  } 
  printf("%d.0\n",l[i].first);
  }
    return 0;
}

//통학 버스
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int N,K,S;
int ans;
vector<pair<int,int>> v[2];

bool comp(pair<int,int> a, pair<int,int> b){
    return abs(a.first-S) < abs(b.first-S);
}

int main()
{
  ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  cin>>N>>K>>S;
  
  for(int i =0,a,b; i < N; i++){
     cin>>a>>b;
     if(a < S) v[0].push_back({a,b});
     else v[1].push_back({a,b});
}

  sort(v[0].begin(),v[0].end(),comp);
  sort(v[1].begin(),v[1].end(),comp);
  
  for(int i = 0; i < 2; i++){
      while(v[i].size()){ 
          int remain_seats = 0;
          while(v[i].size()){
              ans += v[i].back().second / K * abs(v[i].back().first - S) * 2;
              v[i].back().second %= K;
              if(!v[i].back().second) v[i].pop_back();
              else break;
          }
          if(!v[i].size()) break;
          ans += abs(v[i].back().first - S) * 2;
          while(remain_seats < K && v[i].size()){
              remain_seats += v[i].back().second;
              if(remain_seats > K) v[i].back().second = remain_seats - K; 
              else v[i].pop_back();
          }
      }
  } 
    cout<<ans;
    return 0;
}
//나무 막대
#include <iostream>
#include <algorithm>
using namespace std;
struct data{int l,w;} arr[5010];
int T,N;

bool comp(struct data d1,struct data d2) {if(d1.l == d2.l) return d1.w < d2.w; else return d1.l < d2.l;}

int main()
{
   cin>>T;
   while(T--){
       int warr[5010] = {0};
       int m = 0, idx, now;
       cin>>N;
       for(int i = 0,a,b ; i < N; i++){
           cin>>a>>b;
           arr[i] ={a,b};
       }
       sort(arr,arr+N,comp);
       m = 1; warr[0] = arr[0].w;
       for(int i = 1 ; i < N ; i++){
           now = -1; idx = m;
           for(int j = 0 ; j < m; j++) if(warr[j] <= arr[i].w && warr[j] > now){    // 핵심! 같거나 크면서 가장 차가 작은 값을 구하기
               now = warr[j]; idx = j;
           }
           if(idx == m) warr[m++] = arr[i].w;
           else warr[idx] = arr[i].w;
       }
       cout<<m<<'\n';
   }

    return 0;
}
