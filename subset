#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
int parent[1001]={-1,};
int height[1001]={0};
int Find(int u){
	if(parent[u]==-1) return u;
	return Find(parent[u]);
}
bool Union(int u,int v){
	//같은 그룹에 있다면 합병
	//아니면 false 리턴
	u=Find(u);v=Find(v);
	cout<<u<<v<<'\n';
	if(u==v) return false;
	if(height[u]<height[v]) swap(u,v); 
		parent[v]=u;
	if(height[u]==height[v]) height[u]++;
	return true;
	
}
struct Edge{
	int u,v;
	int c;
	bool operator<(Edge rhs){
		return c<rhs.c;
	}
};
vector<Edge> edge;
int main() {
	int V,E;
	cin>>V>>E;
	for(int i=1;i<=V;i++)parent[i]=-1;
	for(int i=0,u,v,c;i<E;i++){
		cin>>u>>v>>c;
		edge.push_back({u,v,c});
	}
	sort(edge.begin(),edge.end());
	int ans=0,cnt=0;
	for(auto e:edge){
		int u=e.u,v=e.v,c=e.c;
		cout<<u<<v<<c;
		cout<<"?";
		if(Union(u,v)){
			ans+=c;
			cout<<c<<'\n';
			cnt++;
		}
		if(cnt==V-1) break;
	}
	cout<<ans;
	return 0;
}
